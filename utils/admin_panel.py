from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from keyboards.reply import kb_menu, get_kb_menu, get_back
from data.database import DBCommands, create_db, User
from create_bot import load_config
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
from keyboards.inline_question import back_admin_panel

db = DBCommands()
config = load_config()


def menu_admin():
    markup = InlineKeyboardMarkup(inline_keyboard=True).add(
        InlineKeyboardButton('–†–æ–∑—Å–∏–ª–∞–Ω–Ω—è', callback_data='send')).add(
        InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤—Ö—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
                             callback_data='list_users')).add(
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='list_contacts')).add(
        InlineKeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω–∞", callback_data="instr_admin")
    )
    return markup


async def admin(message: types.Message):
    await message.answer(text="–í—ñ—Ç–∞—é —Ç–µ–±–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
                              "–¶–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
                              "–í–∏–±–µ—Ä–∏—Ç—å –ø–æ—Ç—Ä–∏–±–Ω—É –∫–Ω–æ–ø–∫—É –Ω–∏—â–µ üëá",
                         reply_markup=menu_admin())
    await message.edit_reply_markup()


async def show_list(call: types.CallbackQuery):
    all_users = await db.show_users()
    for users in all_users:
        text = "–Ü–º'—è: {full_name} –ù–∏–∫–Ω—î–π–º: {username}"
        await call.message.answer(
            text=text.format(
                full_name=users.full_name,
                username=users.username
            ))
    await call.message.answer("–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∂–º—ñ—Ç—å –Ω–∞–∑–∞–¥", reply_markup=back_admin_panel())


async def show_contacts(call: types.CallbackQuery):
    all_contacts = await db.show_registr_users()
    for contact in all_contacts:
        text = "–Ü–º'—è: {name}\n" \
               "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}\n" \
               "Email: {email}\n" \
               "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü—ñ—ó: {register_time}"
        await call.message.answer(
            text=text.format(
                name=contact.name,
                phone=contact.phone,
                email=contact.email,
                register_time=datetime.now()
            ))
    await call.message.answer("–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∂–º—ñ—Ç—å –Ω–∞–∑–∞–¥", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="empty_list")
    ], [
        InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="cancel_admin_menu")
    ]]))


async def empty_my_list(call: types.CallbackQuery):
    await db.empty_cart()
    await call.message.answer("–°–ø–∏—Å–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω–∏–π")


async def cancel_admin_panel(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–í—ñ–¥–º—ñ–Ω–∞", reply_markup=menu_admin())


async def instruct_menu(call: types.CallbackQuery):
    await call.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π: ",
                              reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                                  InlineKeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è", callback_data="inst_mail")
                              ], [
                                  InlineKeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –°–ø–∏—Å–æ–∫ –≤—Ö—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                                                       callback_data="inst_users")
                              ], [
                                  InlineKeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                                       callback_data="inst_contact")
                              ], [
                                  InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="cancel_admin_menu")
                              ]]))




def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(admin, Text(equals='Admin'), user_id=config.tg_bot.admin_ids)
    dp.register_callback_query_handler(show_list, text='list_users', user_id=config.tg_bot.admin_ids)
    dp.register_callback_query_handler(show_contacts, text='list_contacts', user_id=config.tg_bot.admin_ids)
    dp.register_callback_query_handler(cancel_admin_panel, text="cancel_admin_menu", user_id=config.tg_bot.admin_ids)
    dp.register_callback_query_handler(empty_my_list, text="empty_list", user_id=config.tg_bot.admin_ids)
    dp.register_callback_query_handler(instruct_menu, text="instr_admin", user_id=config.tg_bot.admin_ids)

